#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"

#define MAIN 0
#define MAC 1
#define SYM 2
#define NAV 3

#define TAPPING_TERM 210
#define SHIFT_TAP    170
#define QUICK_TAP    105

#define SK(KEY) &nk KEY KEY
#define HYP(KEY) LG(LA(LS(LC(key))))
#define MEH(KEY) LA(LS(LC(key)))
#define HYPR LG(LC(LS(LALT)))


&sk {
  release-after-ms = <60000>;
};

&mt {
    flavor = "tap-preferred";
    retro-tap;
    quick-tap-ms = <125>;
    tapping_term_ms = <175>;
};

&lt {
    flavor = "tap-preferred";
    retro-tap;
    quick-tap-ms = <125>;
    tapping_term_ms = <175>;
};

/ {

    macros {
    	oxford_comma: oxford_comma {
	    label = "ZM_oxford_comma";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <5>;
	    tap-ms = <5>;
	    bindings
	        = <&macro_press &kp LSHFT>
		, <&macro_tap &kp O>
		, <&macro_release &kp LSHFT>
		, <&macro_tap &kp X &kp F &kp O &kp R &kp D &kp SPC &kp C &kp O &kp M &kp M &kp A &kp DOT>
		;
	    };
	    
	md_code: md_code {
	    label = "ZM_md_code";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <3>;
	    tap-ms = <3>;
	    bindings
	        = <&macro_tap &kp GRAVE &kp GRAVE &kp GRAVE>
		;
	    };
	  
	bigarr_rgt: bigarr_rgt {
	    label = "ZM_bigarr_rgt";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <3>;
	    tap-ms = <3>;
	    bindings
	        = <&macro_tap &kp EQUAL &kp GT>
		;
	    };
	    
	 bigarr_lft: bigarr_lft {
	    label = "ZM_bigarr_lft";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <3>;
	    tap-ms = <3>;
	    bindings
	        = <&macro_tap &kp LT &kp EQUAL>
		;
	    };
	 
	 wikilink: wikilink {
	    label = "ZM_wikilink";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <3>;
	    tap-ms = <3>;
	    bindings
	        = <&macro_tap &kp LBKT &kp LBKT>
		;
	    };
	 
	 gt_equal: gt_equal {
	    label = "ZM_gt_equal";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <3>;
	    tap-ms = <3>;
	    bindings
	        = <&macro_tap &kp GT &kp EQUAL>
		;
	    };
	 
	 notequal: notequal {
	    label = "ZM_notequal";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <3>;
	    tap-ms = <3>;
	    bindings
	        = <&macro_tap &kp EXCL &kp EQUAL>
		;
	    };
	 
	 and_and: and_and {
	    label = "ZM_and_and";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <3>;
	    tap-ms = <3>;
	    bindings
	        = <&macro_tap &kp AMPS &kp AMPS>
		;
	    };
	 
	 emdash: emdash {
	    label = "ZM_emdash";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    wait-ms = <3>;
	    tap-ms = <3>;
	    bindings
	        = <&macro_tap &kp MINUS &kp MINUS>
		;
	    };
	};

    behaviors {
	lmt: left_mod_tap {
	    label           = "left_mod_tap";
	    compatible      = "zmk,behavior-hold-tap";
	    flavor          = "tap-preferred";
	    tapping-term-ms = <TAPPING_TERM>;
	    quick-tap-ms    = <QUICK_TAP>;
	    #binding-cells  = <2>;
	    bindings        = <&kp>, <&kp>;
	    hold-trigger-key-positions = <
	     	4  5  6  7
		14 15 16 17 18 19
		25 26 27 28 29
		32 33
	    >;
	};

	rmt: right_mod_tap {
	    label           = "right_mod_tap";
	    compatible      = "zmk,behavior-hold-tap";
	    flavor          = "tap-preferred";
	    tapping-term-ms = <TAPPING_TERM>;
	    quick-tap-ms    = <QUICK_TAP>;
	    #binding-cells  = <2>;
	    bindings        = <&kp>, <&kp>;
	    hold-trigger-key-positions = <
		0  1  2  3
	  8  9  10 11 12 13
	     20 21 22 23 24
		      30 31
	    >;
	};

	lst: left_shift_tap {
	    label           = "left_shift_tap";
	    compatible      = "zmk,behavior-hold-tap";
	    flavor          = "balanced";
	    tapping-term-ms = <SHIFT_TAP>;
	    quick-tap-ms    = <QUICK_TAP>;
	    #binding-cells  = <2>;
	    bindings        = <&kp>, <&kp>;
	    hold-trigger-key-positions = <
	     	4  5  6  7
		14 15 16 17 18 19
		25 26 27 28 29
		32 33
	    >;
	};
	rst: right_shift_tap {
	    label           = "right_shift_tap";
	    compatible      = "zmk,behavior-hold-tap";
	    flavor          = "balanced";
	    tapping-term-ms = <SHIFT_TAP>;
	    quick-tap-ms    = <QUICK_TAP>;
	    #binding-cells  = <2>;
	    bindings        = <&kp>, <&kp>;
	    hold-trigger-key-positions = <
		0  1  2  3
	  8  9  10 11 12 13
	     20 21 22 23 24
		      30 31
	    >;
	};

	// Sticky key on tap, normal key on hold
    	// Useful for modifier-clicking without the modifier remaining active
    	nk: not_so_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "NOT_SO_STICKY_KEY";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
    };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
	
	gqt: global-quick-tap {
	    compatible = "zmk,behavior-hold-tap";
	    label = "GLOBAL_QUICK_TAP";
	    #binding-cells = <2>;
	    flavor = "tap-preferred";
	    tapping-term-ms = <200>;
	    quick-tap-ms = <125>;
	    global-quick-tap;
	    bindings = <&kp>, <&kp>;
	};	
	
	dang: dot_bang {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_BANG";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
	
	squstr: sqt_star {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_STAR";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp STAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
	
	colons: colon_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
	
	parens: LPAR_RPAR {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_RPAR";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

	quomma: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
	
	sqtlt: sqt_layer_tap {
	    compatible = "zmk,behavior-hold-tap";
	    label = "SQT_LAYER_TAP";
	    #binding-cells = <2>;
	    flavor = "tap-preferred";
	    tapping-term-ms = <200>;
	    quick-tap-ms = <125>;
	    global-quick-tap;
	    bindings = <&mo>, <&squstr>;
	};
	
	dqand: dqt_and {
            compatible = "zmk,behavior-mod-morph";
            label = "DQT_AND";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp AMPS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
	
	quommagqt: quomma-global-quick-tap {
	    compatible = "zmk,behavior-hold-tap";
	    label = "QUOMMA_GLOBAL_QUICK_TAP";
	    #binding-cells = <2>;
	    flavor = "tap-preferred";
	    tapping-term-ms = <200>;
	    quick-tap-ms = <125>;
	    global-quick-tap;
	    bindings = <&kp>, <&quomma>;
	};
	
    };

/*                KEY POSITIONS

      ╭─────────────────╮ ╭─────────────────╮
╭─────╯  0   1   2   3  │ │  4   5   6   7  ╰──────╮
│ 8  9   10  11  12  13 │ │ 14  15  16  17  18  19 |
╰──╮ 20  21  22  23  24 │ │ 25  26  27  28  29 ╭───╯
   ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
               ╰────────╯ ╰────────╯            */

    combos {
        compatible = "zmk,combos";
	
	combo_esc {
	    timeout-ms = <20>;
            key-positions = <1 12>;
            bindings = <&kp ESCAPE>;
	};
	
	combo_capsword {
	    timeout-ms = <20>;
            key-positions = <15 6>;
            bindings = <&caps_word>;
	};
	
	combo_slsh {
	    timeout-ms = <20>;
            key-positions = <15 17>;
            bindings = <&kp SLASH>;
	};
	
	combo_lbrc {
	    timeout-ms = <20>;
            key-positions = <2 12>;
            bindings = <&kp LBRC>;
	};
	
	combo_rbrc {
	    timeout-ms = <20>;
            key-positions = <5 15>;
            bindings = <&kp RBRC>;
	};
	
	combo_lbkt {
	    timeout-ms = <20>;
            key-positions = <0 10>;
            bindings = <&kp LBKT>;
	};
	
	combo_rbkt {
	    timeout-ms = <20>;
            key-positions = <7 17>;
            bindings = <&kp RBKT>;
	};
	
	combo_tab {
	    timeout-ms = <20>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
	};
	
	combo_bspc {
	    timeout-ms = <20>;
            key-positions = <15 16>;
            bindings = <&kp BSPC>;
	};

	combo_grave {
            timeout-ms = <20>;
            key-positions = <26 27>;
            bindings = <&kp GRAVE>;
        };
	
	combo_under {
            timeout-ms = <20>;
            key-positions = <6 7>;
            bindings = <&kp UNDER>;
        };
	
	combo_minus {
            timeout-ms = <20>;
            key-positions = <27 28>;
            bindings = <&kp MINUS>;
        };
	
	combo_hash {
            timeout-ms = <20>;
            key-positions = <5 6>;
            bindings = <&kp HASH>;
        };
	
        combo_j {
            timeout-ms = <20>;
            key-positions = <0 1>;
            bindings = <&kp J>;
        };
	
	combo_q {
            timeout-ms = <20>;
            key-positions = <1 2>;
            bindings = <&kp Q>;
        };
	
	combo_x {
            timeout-ms = <20>;
            key-positions = <21 22>;
            bindings = <&kp X>;
        };

	combo_z {
            timeout-ms = <35>;
            key-positions = <22 23>;
            bindings = <&kp Z>;
	};
	
	combo_lsft {
	    timeout-ms = <20>;
            key-positions = <10 11>;
            bindings = <&skq LSHFT>;
	};
	
	combo_rsft {
	    timeout-ms = <20>;
            key-positions = <16 17>;
            bindings = <&skq RSHFT>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        MAIN_layer {
            bindings = <
                         &gqt HYPR W  &gqt LGUI F   &kp P         &kp B            &colons   &kp L          &gqt RGUI U    &gqt HYPR Y
            &none  &kp R &lmt LALT S  &lst LSHFT T  &lmt LCTL H   &kp K            &parens   &rmt RCTL N    &rst RSHFT A   &rmt RALT I  &kp O   &none
                   &kp V &kp C        &kp G         &kp D         &none            &none     &kp M          &quomma        &dang        &dqand
                                      &kp C_MUTE    &sqtlt NAV 0  &lt NAV SPC      &lt SYM E &lt NAV ENTER  &none
            >;

			sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };
	
	MAC_layer {
            bindings = <
                         &gqt HYPR W  &kp F         &kp P         &kp B            &colons   &kp L          &kp U              &gqt HYPR Y
            &none  &kp R &gqt LALT S  &gqt LSHFT T  &gqt LGUI H   &kp K            &parens   &gqt RGUI N    &gqt RSHFT A       &gqt RALT I  &kp O   &none
                   &kp V &kp C        &gqt LCTL G   &kp D         &none            &none     &kp M          &quommagqt RCTL 0  &dang        &dqand
                                      &kp C_MUTE    &sqtlt NAV 0  &lt NAV SPC      &lt SYM E &lt NAV ENTER  &none
            >;

			sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };

        SYM_layer {
            bindings = <
                         &kp N7 &kp N8 &kp N9 &kp N0    &kp TILDE &kp DOLLAR &kp LT &kp GT
            &none &kp N0 &kp N3 &kp N2 &kp N1 &kp PIPE  &kp BSLH  &kp EQUAL  &kp PRCNT &kp AT &kp CARET &none
                  &trans &kp N4 &kp N5 &kp N6 &none     &none     &kp PLUS   &trans    &trans &trans
                                &trans &kp N0 &trans    &trans    &trans     &trans
            >;

			sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        };
        NAV_layer {
            bindings = <
                            &kp CAPS &kp TAB   &trans    &bt BT_NXT      &none       &kp DEL  &kp UP    &kp HOME
            &none &kp PSCRN &sk LALT &sk LSHFT &sk LCTRL &bt BT_PRV      &bt BT_CLR  &kp LEFT &kp DOWN  &kp RIGHT &kp INS &none
                  &to MAC   &trans   &sk LGUI  &to MAC   &none           &none       &kp BSPC &kp PG_DN &kp PG_UP &kp END
                                     &trans    &trans    &trans          &trans      &trans   &trans
            >;

			sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
	};
	/*
	MAIN_layer {
            bindings = <
                         &trans &trans &trans &trans  &trans &trans &trans &trans
            &none &trans &trans &trans &trans &trans  &trans &trans &trans &trans &trans &none
                  &trans &trans &trans &trans &none   &none  &trans &trans &trans &trans
                                &trans &trans &trans  &trans &trans &trans
            >;

			sensor-bindings = <&inc_dec_kp PG_DN PG_UP>;
        }; */
    };
};
